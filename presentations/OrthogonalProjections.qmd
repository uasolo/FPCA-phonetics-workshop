---
title: "Orthogonal projections"
author: "Michele Gubian"
date: "September 2023"
format: revealjs
editor: visual
fig-cap-location: top
---

## Functions

A 'machine' that transforms numbers in a pre-specified way.

::: {.fragment}
```{dot}

digraph G {
rankdir=LR;
  A[shape = plaintext label="x", fontname="times-italic"]
  B[shape = box label="f(x)", fontname="times-italic"]
  C[shape = plaintext label = "y", fontname="times-italic"]
  A -> B;
  B -> C;
  
}
```

:::

## Functions

Example:

```{dot}

digraph G {
rankdir=LR;
  A[shape = plaintext label=<<I>x</I>&nbsp; = 1.7>]
  B[shape = box label = <<I>x</I><SUP >2</SUP> + 3>]
  C[shape = plaintext label=<<I>y</I>&nbsp; = 1.7<SUP>2</SUP> + 3 = 5.89>]
  A -> B;
  B -> C;
}
```

## Functions

![](plots/f.png)


## Orthogonal basis 

### (Legendre polynomials)

::: {layout-ncol=2}
![$B1(t)$](plots/Poly1.png)

![$B2(t)$](plots/Poly2.png)
:::

## Orthogonal basis 

### (Legendre polynomials)

::: {layout-ncol=2}
![$B3(t)$](plots/Poly3.png)

![$B4(t)$](plots/Poly4.png)
:::

## Function product

::: {layout-ncol=3}

![$f(t)$](plots/curve.png)

![$B1(t)$](plots/Poly1.png)

![$f(t) \cdot B1(t)$](plots/curvePoly1.png)
:::

## Scalar product

:::: {.columns}

::: {.column width="50%"}
![$\int f(t) \cdot B1(t) \; dt$](plots/curvePoly1Int.png)
:::

::: {.column width="50%"}
Scalar product $=$

<span style="color:#006400;">dark area</span> $-$  <span style="color:#7CFC00;">light area</span> $=$

$= 0.30$ 
:::

::::


